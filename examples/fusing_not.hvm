true = λt λf t
false = λt λf f
not = λboolean (boolean false true)
fusing_not = λboolean λt λf (boolean f t)
// Creates a Church numeral out of a native number
to_church 0 = λf λx x
to_church +p = λf λx (f (to_church p f x))
main = 
	let two = λf λx (f (f x))
	let two_pow_512 = ((to_church 512) two) // Composition of church-encoded numbers is equivalent to exponentiation.
	// Self-composes `not` 2^512 times and prints the result.
	(two_pow_512 fusing_not)  // try replacing this by not. Will it still work?