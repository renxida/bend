---
source: tests/golden_tests.rs
input_file: tests/golden_tests/encode_pattern_match/list_merge_sort.hvm
---
(Cons) = λhead λtail λ#List Cons λ#List Nil (#List.Cons.tail (#List.Cons.head Cons head) tail)

(False) = λ#Bool True λ#Bool False False

(If) = λx (#Bool x If$PTrue If$PFalse)

(If$PFalse) = If$R1

(If$PTrue) = If$R0

(If$R0) = λthen λelse then

(If$R1) = λthen λelse else

(Map) = λx (#List x Map$PCons Map$PNil)

(Map$PCons) = λ#List.Cons.head y0 λ#List.Cons.tail y1 (Map$R1 y0 y1)

(Map$PNil) = Map$R0

(Map$R0) = λf Nil

(Map$R1) = λh λt λf (Cons (f h) (Map t f))

(Merge) = λx (Merge$P x)

(Merge$P) = λy0 λx ((#List x Merge$P$PCons Merge$P$PNil) y0)

(Merge$P$PCons) = λ#List.Cons.head y0 λ#List.Cons.tail y1 λx0 λx ((#List x Merge$P$PCons$PCons Merge$P$PCons$PNil) x0 y0 y1)

(Merge$P$PCons$PCons) = λ#List.Cons.head y0 λ#List.Cons.tail y1 λx0 λx1 λx2 (Merge$R2 x0 x1 x2 y0 y1)

(Merge$P$PCons$PNil) = λx0 λx1 λx2 (Merge$R1 x0 (Cons x1 x2))

(Merge$P$PNil) = λx0 (Merge$R0 x0)

(Merge$R0) = λcmp λys ys

(Merge$R1) = λcmp λxs xs

(Merge$R2) = λcmp λxh λxt λyh λyt (If (cmp xh yh) let ys = (Cons yh yt); (Cons xh (Merge cmp xt ys)) let xs = (Cons xh xt); (Cons yh (Merge cmp xs yt)))

(MergePair) = λx (MergePair$P x)

(MergePair$F0) = λx (MergePair$F0$P x)

(MergePair$F0$P) = λy0 λx (MergePair$F0$P$P x y0)

(MergePair$F0$P$P) = λy0 λx0 λx ((#List x MergePair$F0$P$P$PCons MergePair$F0$P$P$PNil) x0 y0)

(MergePair$F0$P$P$PCons) = λ#List.Cons.head y0 λ#List.Cons.tail y1 λx0 λx1 (MergePair$F0$R0 x0 x1 y0 y1)

(MergePair$F0$P$P$PNil) = λx0 λx1 (MergePair$F0$R1 x0 x1 Nil)

(MergePair$F0$R0) = λcmp λh1 λh2 λt (Cons (Merge cmp h1 h2) (MergePair cmp t))

(MergePair$F0$R1) = λcmp λx$0 λx$1 (Cons x$0 x$1)

(MergePair$P) = λy0 λx ((#List x MergePair$P$PCons MergePair$P$PNil) y0)

(MergePair$P$PCons) = λ#List.Cons.head y0 λ#List.Cons.tail y1 λx0 (MergePair$R0 x0 y0 y1)

(MergePair$P$PNil) = λx0 (MergePair$R1 x0 Nil)

(MergePair$R0) = λcmp λh1 λx$0 (MergePair$F0 cmp h1 x$0)

(MergePair$R1) = λcmp λxs xs

(MergeSort) = λcmp λxs (Unpack cmp (Map xs Pure))

(Nil) = λ#List Cons λ#List Nil Nil

(Pure) = λx (Cons x Nil)

(True) = λ#Bool True λ#Bool False True

(Unpack) = λx (Unpack$P x)

(Unpack$F0) = λx (Unpack$F0$P x)

(Unpack$F0$P) = λy0 λx (Unpack$F0$P$P x y0)

(Unpack$F0$P$P) = λy0 λx0 λx ((#List x Unpack$F0$P$P$PCons Unpack$F0$P$P$PNil) x0 y0)

(Unpack$F0$P$P$PCons) = λ#List.Cons.head y0 λ#List.Cons.tail y1 λx0 λx1 (Unpack$F0$R1 x0 x1 (Cons y0 y1))

(Unpack$F0$P$P$PNil) = λx0 λx1 (Unpack$F0$R0 x0 x1)

(Unpack$F0$R0) = λcmp λh h

(Unpack$F0$R1) = λcmp λx$0 λx$1 (Unpack cmp (MergePair cmp (Cons x$0 x$1)))

(Unpack$P) = λy0 λx ((#List x Unpack$P$PCons Unpack$P$PNil) y0)

(Unpack$P$PCons) = λ#List.Cons.head y0 λ#List.Cons.tail y1 λx0 (Unpack$R1 x0 y0 y1)

(Unpack$P$PNil) = λx0 (Unpack$R0 x0)

(Unpack$R0) = λcmp Nil

(Unpack$R1) = λcmp λh λx$0 (Unpack$F0 cmp h x$0)

(Unpack$R2) = λcmp λxs (Unpack cmp (MergePair cmp xs))
